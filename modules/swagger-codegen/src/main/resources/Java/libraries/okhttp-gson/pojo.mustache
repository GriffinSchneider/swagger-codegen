/**
 * {{#description}}{{description}}{{/description}}{{^description}}{{classname}}{{/description}}
 */{{#description}}
@ApiModel(description = "{{{description}}}"){{/description}}
public class {{classname}} {{#parent}}extends {{{parent}}}{{/parent}} implements Parcelable {
    {{#vars}}
    {{#isEnum}}
{{>libraries/common/modelInnerEnum}}
    {{/isEnum}}
    {{#items.isEnum}}
    {{#items}}
{{>libraries/common/modelInnerEnum}}
    {{/items}}
    {{/items.isEnum}}
    @SerializedName("{{baseName}}")
    private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
    {{/vars}}

    {{#vars}}
    /**
    {{#description}}
     * {{{description}}}
    {{/description}}
    {{^description}}
     * Get {{name}}
    {{/description}}
    {{#minimum}}
     * minimum: {{minimum}}
    {{/minimum}}
    {{#maximum}}
     * maximum: {{maximum}}
    {{/maximum}}
     * @return {{name}}
     **/
    @ApiModelProperty({{#required}}required = {{required}}, {{/required}}value = "{{{description}}}")
    public {{{datatypeWithEnum}}} {{getter}}() {
        return {{name}};
    }

    {{^isReadOnly}}
    /**
     * Set {{name}}
     *
     * @param {{name}} {{name}}
     */
    public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
        this.{{name}} = {{name}};
    }

    {{/isReadOnly}}
    {{/vars}}


    public void writeToParcel(Parcel out, int flags) {
        {{#parent}} super.writeToParcel(out, flags); {{/parent}} {{#vars}}
        out.writeValue({{name}});
        {{/vars}}
    }

    {{classname}}() {
        super();
    }

    {{classname}}(Parcel in) {
        {{#parent}} super(in); {{/parent}}
        {{#vars}}
        {{name}} = ({{{datatypeWithEnum}}})in.readValue(null);
        {{/vars}}
    }
    
    public int describeContents() {
        return 0;
    }

    public static final Parcelable.Creator<{{classname}}> CREATOR = new Parcelable.Creator<{{classname}}>() {
        public {{classname}} createFromParcel(Parcel in) {
            return new {{classname}}(in);
        }
        public {{classname}}[] newArray(int size) {
            return new {{classname}}[size];
        }
    };


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }{{#hasVars}}
        {{classname}} {{classVarName}} = ({{classname}}) o;
        return {{#vars}}Objects.equals(this.{{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
        {{/hasMore}}{{/vars}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
        return true;{{/hasVars}}
    }

    @Override
    public int hashCode() {
        return Objects.hash({{#vars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class {{classname}} {\n");
        {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
        {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
        {{/vars}}sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     *
     * @param o Object to be converted to indented string
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }
}
