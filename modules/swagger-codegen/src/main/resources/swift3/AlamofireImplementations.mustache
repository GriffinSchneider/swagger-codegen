// AlamofireImplementations.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

public protocol AlamofireRequestBuilderLoggingDelegate: class {
    func logRequest(_: DataRequest)
    func logStringResponse(_: DataResponse<String>, forRequest: DataRequest)
    func logDataResponse(_: DataResponse<Data>, forRequest: DataRequest)
    func logGenericResponse(_: DataResponse<Any>, forRequest: DataRequest)
}

/// Protocol allows `RequestBuilder` objects to be passed without needing to worry about generics.
public protocol RequestBuilderProtocol {
    func addHeaders(_ aHeaders:[String:String]) -> Void
}

extension RequestBuilder: RequestBuilderProtocol { }

/// Enables error responses to be handled and requests to be retried.
/// Users of this library may use this to attempt to refresh an access token, as an example.
public protocol RequestErrorHandler: class {
    func handleError(request: RequestBuilderProtocol,
                     errorResponse: ErrorResponse,
                     shouldRetry: @escaping (Bool) -> Void) -> Bool
}

/// Enables consumers of this library to log information about requests & responses
extension AlamofireRequestBuilderLoggingDelegate {
    func logRequest(_: DataRequest) { }
    func logStringResponse(_: DataResponse<String>, forRequest: DataRequest) { }
    func logDataResponse(_: DataResponse<Data>, forRequest: DataRequest) { }
    func logGenericResponse(_: DataResponse<Any>, forRequest: DataRequest) { }
}

open class AlamofireRequestBuilderFactory: RequestBuilderFactory {
    public static weak var loggingDelegate: AlamofireRequestBuilderLoggingDelegate?

    public static weak var requestErrorHandler: RequestErrorHandler?

    public func getBuilder<T>() -> RequestBuilder<T>.Type {
        return AlamofireRequestBuilder<T>.self
    }
}

// Store manager to retain its reference
private var managerStore: [String: Alamofire.SessionManager] = [:]

open class AlamofireRequestBuilder<T>: RequestBuilder<T> {

    required public init(method: String, URLString: String, parameters: [String : Any]?, isBody: Bool, timeout: TimeInterval?) {
        super.init(method: method, URLString: URLString, parameters: parameters, isBody: isBody, timeout: timeout)
    }

    /**
     May be overridden by a subclass if you want to control the session
     configuration.
     */
    open func createSessionManager() -> Alamofire.SessionManager {
        let configuration = URLSessionConfiguration.default
        if let timeout = timeout {
            configuration.timeoutIntervalForRequest = timeout
        }
        configuration.httpAdditionalHeaders = buildHeaders()
        return Alamofire.SessionManager(configuration: configuration)
    }

    /**
     May be overridden by a subclass if you want to control the Content-Type
     that is given to an uploaded form part.

     Return nil to use the default behavior (inferring the Content-Type from
     the file extension).  Return the desired Content-Type otherwise.
     */
    open func contentTypeForFormPart(fileURL: URL) -> String? {
        return nil
    }

    /**
     May be overridden by a subclass if you want to control the request
     configuration (e.g. to override the cache policy).
     */
    open func makeRequest(manager: SessionManager, method: HTTPMethod, encoding: ParameterEncoding) -> DataRequest {
        return manager.request(URLString, method: method, parameters: parameters, encoding: encoding)
    }

    override open func execute(_ completion: @escaping (_ response: Response<T>?, _ error: ErrorResponse?) -> Void) {
        let managerId:String = UUID().uuidString
        // Create a new manager for each request to customize its request header
        let manager = createSessionManager()
        managerStore[managerId] = manager

        let encoding:ParameterEncoding = isBody ? JSONEncoding() : URLEncoding()

        let xMethod = Alamofire.HTTPMethod(rawValue: method)
        let fileKeys = parameters == nil ? [] : parameters!.filter { $1 is NSURL }
                                                           .map { $0.0 }

        if fileKeys.count > 0 {
            manager.upload(multipartFormData: { mpForm in
                for (k, v) in self.parameters! {
                    switch v {
                    case let fileURL as URL:
                        if let mimeType = self.contentTypeForFormPart(fileURL: fileURL) {
                            mpForm.append(fileURL, withName: k, fileName: fileURL.lastPathComponent, mimeType: mimeType)
                        }
                        else {
                            mpForm.append(fileURL, withName: k)
                        }
                        break
                    case let string as String:
                        mpForm.append(string.data(using: String.Encoding.utf8)!, withName: k)
                        break
                    case let number as NSNumber:
                        mpForm.append(number.stringValue.data(using: String.Encoding.utf8)!, withName: k)
                        break
                    default:
                        fatalError("Unprocessable value \(v) with key \(k)")
                        break
                    }
                }
                }, to: URLString, method: xMethod!, headers: nil, encodingCompletion: { encodingResult in
                switch encodingResult {
                case .success(let upload, _, _):
                    if let onProgressReady = self.onProgressReady {
                        onProgressReady(upload.progress)
                    }
                    self.processRequest(request: upload, managerId, completion)
                case .failure(let encodingError):
                    completion(nil, ErrorResponse(statusCode: 415, data: nil, error: encodingError))
                }
            })
        } else {
            let request = makeRequest(manager: manager, method: xMethod!, encoding: encoding)
            if let onProgressReady = self.onProgressReady {
                onProgressReady(request.progress)
            }
            processRequest(request: request, managerId, completion)
        }

    }

    private func processRequest(request: DataRequest, _ managerId: String, _ completion: @escaping (_ response: Response<T>?, _ error: ErrorResponse?) -> Void) {
        if let credential = self.credential {
            request.authenticate(usingCredential: credential)
        }

        let cleanupRequest = {
            _ = managerStore.removeValue(forKey: managerId)
        }

        let validatedRequest = request.validate()
        AlamofireRequestBuilderFactory.loggingDelegate?.logRequest(validatedRequest)

        switch T.self {
        case is String.Type:
            validatedRequest.responseString(completionHandler: { (stringResponse) in
                AlamofireRequestBuilderFactory.loggingDelegate?.logStringResponse(stringResponse, forRequest: validatedRequest)
                cleanupRequest()

                if stringResponse.result.isFailure {
                    let errorResponse = ErrorResponse(withResponse: stringResponse)

                    guard !self.handleError(response: errorResponse, completion: completion) else {
                        return
                    }

                    completion(nil, errorResponse)
                    return
                }

                completion(
                    Response(
                        response: stringResponse.response!,
                        body: ((stringResponse.result.value ?? "") as! T)
                    ),
                    nil
                )
            })
        case is Void.Type:
            validatedRequest.responseData(completionHandler: { (voidResponse) in
                AlamofireRequestBuilderFactory.loggingDelegate?.logDataResponse(voidResponse, forRequest: validatedRequest)
                cleanupRequest()

                if voidResponse.result.isFailure {
                    let errorResponse = ErrorResponse(withResponse: voidResponse)

                    guard !self.handleError(response: errorResponse, completion: completion) else {
                        return
                    }

                    completion(nil, errorResponse)
                    return
                }

                completion(
                    Response(
                        response: voidResponse.response!,
                        body: nil),
                    nil
                )
            })
        case is Data.Type:
            validatedRequest.responseData(completionHandler: { (dataResponse) in
                AlamofireRequestBuilderFactory.loggingDelegate?.logDataResponse(dataResponse, forRequest: validatedRequest)
                cleanupRequest()

                if (dataResponse.result.isFailure) {
                    let errorResponse = ErrorResponse(withResponse: dataResponse)

                    guard !self.handleError(response: errorResponse, completion: completion) else {
                        return
                    }

                    completion(nil, errorResponse)
                    return
                }

                completion(
                    Response(
                        response: dataResponse.response!,
                        body: (dataResponse.data as! T)
                    ),
                    nil
                )
            })
        default:
            validatedRequest.responseJSON(options: .allowFragments) { response in
                AlamofireRequestBuilderFactory.loggingDelegate?.logGenericResponse(response, forRequest: validatedRequest)
                cleanupRequest()

                if response.result.isFailure {
                    let errorResponse = ErrorResponse(withResponse: response)

                    guard !self.handleError(response: errorResponse, completion: completion) else {
                        return
                    }

                    completion(nil, errorResponse)
                    return
                }

                // handle HTTP 204 No Content
                // NSNull would crash decoders
                if response.response?.statusCode == 204 && response.result.value is NSNull{
                    completion(nil, nil)
                    return;
                }

                if () is T {
                    completion(Response(response: response.response!, body: (() as! T)), nil)
                    return
                }
                if let json: Any = response.result.value {
                    let body = Decoders.decode(clazz: T.self, source: json as AnyObject)
                    completion(Response(response: response.response!, body: body), nil)
                    return
                } else if "" is T {
                    // swagger-parser currently doesn't support void, which will be fixed in future swagger-parser release
                    // https://github.com/swagger-api/swagger-parser/pull/34
                    completion(Response(response: response.response!, body: ("" as! T)), nil)
                    return
                }

                completion(nil, ErrorResponse(statusCode: 500, data: nil, error: NSError(domain: "localhost", code: 500, userInfo: ["reason": "unreacheable code"])))
            }
        }
    }

    open func buildHeaders() -> [String: String] {
        var httpHeaders = SessionManager.defaultHTTPHeaders
        for (key, value) in self.headers {
            httpHeaders[key] = value
        }
        return httpHeaders
    }

    /// Uses the `requestErrorHandler` if it not `nil`. Returns `true` if the error is being handled. If the error is handled, the caller should not call the completion block.
    private func handleError(response: ErrorResponse,
                             completion: @escaping (_ response: Response<T>?, _ error: ErrorResponse?) -> Void) -> Bool {

        if let errorHandler = AlamofireRequestBuilderFactory.requestErrorHandler {
            let errorWasHandled = errorHandler.handleError(
                request: self,
                errorResponse: response,
                shouldRetry: { attemptRetry in
                    if attemptRetry {
                        self.execute(completion)
                    } else {
                        completion(nil, response)
                    }
            })

            return errorWasHandled
        }

        return false
    }
}
